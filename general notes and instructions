Typescript is a superset of ES5 and ES6 which is built on top of javascript. It is created by microsoft and allows type information in javascript.

When defining a variable  in a function in Javascript, throws an error/exception if a non-matched typed variable is called. It can be avoided in typescript by declaring the type of the variable(in function).
JS: Example: 
function multiply(x,y){
return x*y;
}
multiply(2,3);
output: 2*3=6

But if a string is passed instead of numbers in the variables, throws undefined. and this exceptions is seen only when the application is run, which can be tricky at times.

to avoid this we use TS:
TS example:
function multiple(x:number, y:number){ //x:any, y:any will help in passing any value
return x*y;
}
multiply(2,3);

In this case, wen a string is passed, before running the application the IDE shows red underline which is an indication of exception which saves a lot of time.

let person:string; //defining
person =4; //shows red underline
person = 'bob';


-> to convert a typical typescript file to javascript file, use tsc command in the same project folder.
-> conversion of typescript file to javascript file is called Transpolation. TS---->JS.

To start an angular project: 
1. install node and type  
							npm install -g @angularcli // installs node js from command line along with required angular libraries from @angularcli.
2. to start a project:
							ng new ng2-cribs // ng2-cribs is the project name and this command helps in creating a new project with all necessary files imported from @angularcli
3. to run the project:
							ng serve

-> import @angular/forms                import @angular/http     are some of the individual packages which has various modules.

-> a component is something whih has specific functionalities like template,, view or its own styles.


TO CREATE A NEW COMPONENT:
-> open cmd and goto project folder and type <ng g component crib-listing>
Syntax: ng g component <component name>   //ng denotes angular2 || g is to generate
-> the above cmd creates 4 files(imports and adds to the declarations array in app.module.ts) with .css, .html, .specs.ts, .ts


TO INSTALL BOOTSTRAP TO OUR PROJECT:
->goto cmd, and go to project folder, type 
			<npm install bootstrap --save>
	and save that to <package.json> file.
REGISTERING TO ANGULAR CLI CONFIGURATION.
->goto <angular-cli.json> file and find "styles":
	"style":[
		 "style.css",
		 "../node_modules/bootstrap/dist/css/bootstrap.min/css"]
	this is the cli which we get from angular website.	 
		 
-> so far, we have everything to run this project.
-> so restart the project and run it.

-> But, what if we want to reuse the same html for different area of application?
 |-> for that we will create a new dedicated component that is responsible for displaying the data.
 
create new componenet.
-> ng g componenent crib-card //ng g componenent <component_name>
copy the entire code from class thumbnailm from crib-listing.component.html file to crib-card.componenet.html 

now the challenge is, we can only see the empty grid with no data populated in it.
We can fix that with Property binding. let us pass the data into components.

now, we are passing the crib as input.
so, go to crib.listing.component.ts and add Input in imports.


PROPERTY BINDING:
-> Is angular 2 concept and be used in [], and we say we want to bind a property called crib and we want to poass a local vairable in to it(crib-listing.component.html) and that is picked up in crib-card.component.ts as decorator and assign it to a local property called criba nd can be used in html.
-> Because the code in crib-listing.componenet.css belongs to crib-card.componenet.css, we paste it in there and everything works the same.
-> lets assume that we dont knw what is going on with the values, like what values each item has, lets see if we want to use or get the number of bedrooms or kitchens, but the kitchens information is not present in our data.
-> Typescript guives us really explicit abut what kind of data should exist on crib property, which can be done by INTERFACE concept.

INTERFACES:
Interfaces is a class that is going to describe how something should be shaped(like what kind of keys or values that is should contain).

CREATE AN INTERFACE:
	ng g interface <interface_name><enter>
	ng g interface Crib
    //an interface file will be created in src/app/ location with the name crib.ts	
	
-> once and interface is created, let us define some data in it. and this should be imported in crib-card.component.ts file to call it.
-> whenever an interface is created, it needs to be defined. here we are importing in crib-card.component.ts

Summary So far:
-> we have got all the data in cribs.ts in data folder. we have got constant type called cribs and we are exporting and the wat that is committed now is in our cribs-listing.component.ts.
-> we import cribs which is set of data and we assign it to local member(cribs: Array<any> = cribs;) which is going to give all the data we need for our application so far.

-> In real world, we will make a http request for this data when the application starts or when the component is initialized, because we are implementing OnInit.
	ngOnInti(){ //make http request }

USE OF HTTP REQUEST:- (angulars HTTP implementation):-

-> let us move the data folder a level up into src folder and rename cribs.ts to cribs.json and remove export const cribs.
	// the reason is when we use http to get some data from server, generally we get it back in json format. JSON gives the compact way of recieving data and we will be able to use it very easily in javascript application.

-> Before we make HTTP request call to our data, we have to let our angular cli know where it is. For that we have to add it to our assets array in angular-cli.json.
-> we have to get http request for data. so import it from angular cli class.
	|-> but we also need to inject it into component which will make use of implementation that angular gives us for injecting dependencies within the ap and the way we inject is, we come down to constructor.
     ***|-> Making Http request is an asynchronous operation. so any time we request or deposit some data from server, we dont know really  when the response is going to come exactly. and waiting for the exact time for reply is ideally not a good practice.
     		for that reason, we want http request to be asynchronous.
	
BELOW ARE FEW DIFFERENT WAYS TO HANDLE ASYNCHRONOUS OPERATIONS. 
	1. SOME OF THEM ARE COMMON ONES LIKE CALLBACKS:
		CALLBACK FUNCTIONS:
			ngOnInit(){
			this.http.get('data/cribs.json', function(error, data) //-> here, we can deal with data when it comes back.
			)};
	2. PROMISES:
		this.http.get('data/cribs.json').then(data) //->the data in here is the same data as above. we can deal when it comes back.
		
	
	3. Angular Http requests implementation or when ever Http requests are used, angular actually uses something called OBSERVABLES(handles values), because it uses Obeservables, we can SUBSCRIBE to the result of that request and within this subscription, we can get data and make use of it.
	But before we subscribe, we have to make sure that what ever we are going to get is in json file format.
	we can use that with operator from RXJS library called MAP(helps in transforming the data which comes from http request to json file format). 
	
	lets say, we are getting and error? lets put that in a separate error file.(cribs-listing.component.ts)

->With this we are getting everything from http request. But, we are supposed to use SERVICES to get this data.
SERVICES:-
-> services has many advantages and the main is REUSABILITY.
-> let us create a service that gives access to our http request and it can be resued.
 |-> create a new directory called services in app folder, enter that folder and create a new service with below cmd.
 			ng g service cribs //cribs is the name of the service
	|-> when a service is created, it created 4 files. cribs.service.ts file has @Injectable() decorator which injects using the concept of dependency injection.
	FOR EXAMPLE: Http class that comes with angular makes use of constructor to inject in component.
	--> same goes with SERVICES, it is going to be injectable and we can get it using dependency injection system.

NOTE: While creating a service, we get a message saying "service created but not provided", i.e., we have to come to app.module.ts and within provider keys in @NgModule, we have to say that we want to use(get) this service.
providers: [CribsService].....and have to import it ....... import {CribsService} from './services/cribs.service';

-> lets create a method in our cribs.service.ts which will fetch(get) the data in json format using map from rxjs library.
-> now this service is ready to use. Lets make use of the components. crib-listing.component.ts.

-> we dont need map function any longer in our currect component because we are making use of the map function which is already present in the newly created service.

Summary So far:
-> Now that the service logic is complete, we can reuse this logic in multiple places, instead of using the same logic again and again, we will reuse it.
-> If we have all the http logic in a service, it is easy to test these calls.

-> Now that our application is up and running and all the data is coming from json file, lets create a FORM to add new listing if needed.
		let us create a new component for that.
		
		ng g component add-listing-form
		
SETTING UP THE FORM TEMPLATE:
add-listing-componenet.html:

#newCribForm - template variable(a template variable is denoted by # symbol) - sets the top level form group.

with angular forms, we can,
1. track whether the form is valid or not
2. get the individual values from input elements in the form.

Note: if it is jquerry, we have to take the values explicitly, we have to write the js code to capture the values and later can be manipulated.
but in angular, we can do that just by creating a TEMPLATE VARIABLE.

EXPLAINING THE FORM:
<form #newCribForm="ngForm" (ngSubmit)="onCribSubmit(newCribForm.value)"> 
1. #newCribForm : template variable
2. ngSubmit : event binding - to onCribSubmit method and we are taking the values of each element(newCribform) that is going to be passed
3. newCribForm : we are taking the values that come from here and those values are the values that come from each value in input element.
4. onCribSubmit: method in component class
5. value : Object
6. ngModel : directive - we have to mark for any of the inputs that we want to be part of this form, i.e., all inputs, text areas, elements.
 |-> when we pass the values to onCribSubmit method. 
 |-> we are going to get one OBJECT value and one of the KEYS is ADDRESS, which is going to be the address of key that we are going to put in to this element.

 |-> In property type, we have got a single type option element with in our select.
 	|-> In traditional html select elements, we will give each and every element an option to be in that list;
		but here we are taking advantage of
				*ngFor    --> repeater
		and TEMPLATE OUT set og values that are in the COLLECTION(PROPERTY TYPES)
	Note: we have to initialize the property type in our component class.
 |-> the SUBMIT button in the form will trigger the ngSubmit event defaultly.	

DECLARE THE FORM IN ROOT MODULE:
 -> we need to declare the form in app.module.ts
 	1. import from angular/forms
	2. add the FormsModule in imports declaration

ADDING NEW ATTRIBUTE TO EXISTING LISTING:
-> propertyTypes: Array<string> = ['House','Condo','Duplex'];

COMMUNICATING BETWEEN THE COMPONENETS: 

->Lets say, we want data to be added to arry of listings that we got in our application.
->This array of listings is in cribs-listing.component.ts
		Cribs:Array
	which is populated by cribsService and called by getAllCribs() method.
	|-> Once it is called, we substring the result that comes from it and 
	|-> we are populating the cribs array with data that comes back.
	
-> The data that comes from form submit (onCribSubmit - which is in add-listing-form.component.ts) in to this array
-> we are dealing with two different componenets(crib-listing-components and add-listing-form). 
-> The challenge is to make them talk to each other.
	-> we are going to do that with Services that we have already created(cribs.service.ts)
	-> we already have the method called getAllCribs().
	
	let us create another method which would communicate between those two components.
		addCrib(){}                --------in crib.service.ts


-> we subscribed the result that comes from getAllCribs(), the same way we are going to use something called SUBJECT that comes from rxjs library.

NOTE: RXJS:- 
	  1. a reactive extension javascript library mainly used to make use of observables in js apps.
	  2. which is widely used in angular 2, but this really is not a angular library.
	  we saw that in getAllCribs() because this.http.get calls in angular 2 which will return an observable.
	  As a result we can subscribe them for results in cribs-listing.componenet.ts

SUBJECT:
-> an Observable and a Subject (which is a type of observable) is used to communicate between the components.
-> a subject is both observable and observer.
-> basically it is the way that we can set the bahaviour that is like an observable but we cak also subscribe as an observer.
Note: Observables are to observe the values of data over time.

The flow is, when we are submitting our form we are calling our service and we are sending the data that comes from the form to the service.

we are calling or addCrib which is our service crib.service.ts is calling or next methiod on the subject that we have set up.

because the subject is both observer and observalbe,, we can call next on it and we can observe that data coming through in our crib-listing.component.
so thats the communication bus.
it goes from 			add-listing-form.component.ts -> cribs.services.ts -> crib-listing.component.ts

now that we are getting our data from console.log, lets add the data to our array.

SPREAD OPERATOR:
-> Now that our newly added listing is working good, if we want that to be added we can use SPREAD OPERATOR.
-> denoted as ...
     		 data => this.cribs = [data, ...this.cribs]
			//data-> new data that comes from subscription
		  	//... is spread operator. spread on existing data in cribs array.
			
The new challenge is, when the form is submitted, the data in the form is not getting cleared.
	this can be done in add-listing.form.component.ts
 |-> after addCrib() is called, we want the form to be cleared. for that we have to get hold on form in component class.
 |-> we have to call ViewChild decorator.
 	this.newCribForm.reset();  //resets the existing form


ADDING A PIPE:

-> It would be great if we have some way to sort these cards/listings which takes the order that we give within the array and set default price from high to low or may be the property type.

For that we make use of ANGULAR PIPE(filters)

Note: Filter is something that is applied to repeater and we could do something like OrderBy filter with pipe symbol ...."|"

Ex: 	<div *ngFor ="let crib of cribs | orderBy:"price">
					  //orderby is filter
					  //price is the argument:gives the price from high to low
	</div>

  ANGULAR 2 doesnt come with its orderby pipe. so we have to implement this ourself.


CREATING A CUSTOM PIPE:

-> first add a sortfield array to the existing component.
	  error: string = '';
	  sortField: string = 'price';
	  sortDirection: string = 'asc';
	  sortFields: Array<string> = [
	    'address',
	    'area',
	    'bathrooms',
	    'bedrooms',
	    'price',
	    'type'
	  ];
-> we need to use a service to capitalize the first letter before it shows on the screen.
 		STOP SERVER
-> lets create a new service in our service folder
	cd src/app/services <-|
	ng g service util <-|
Note: When a service is created, we get a warning saying "service is created but not provided". for that we need to import the service in app.module.ts and add this service in providers.
      we need to inject the service utilService.
      
Output: now we have sort list and drop down to select all the attributes which we inserted.

-> even though we have got our list here,, its not doing anything yet because, we have to put a PIPE to actually do the sorting.

	 STOP the APP.
	 GO ONE LEVEL UP to APP folder.
	 
	 mkdir pipes
	 ng g pipe sort-by
	











 
 
 
 
